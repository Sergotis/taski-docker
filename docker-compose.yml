# Файл docker-compose.yml

# Версия docker-compose
version: '3'

# Перечень volume (хранилищ данных вне контейнера)
volumes:
  pg_data:
  static:

# Названия и описания контейнеров, которые должны быть запущены
services:
  # Имя и описание первого контейнера; имя выбирает разработчик. 
  # Это контейнер с сервером PostgreSQL
  db:
    # Из какого образа создать запустить контейнер (если уже есть готовый образ):
    image: postgres:13.10
    # Файл (или список файлов) с переменными окружения
    env_file: .env
    # Укажем какой volume подключить для этого контейнера в формате имя_volume:директория_контейнера
    # имя_volume - см. чуть выше
    # директория_контейнера - директория внутри текущего контейнера, где хранится БД (пока контейнер существует)
    # от которой необходимо перенаправлять все обращения наружу, т.е. к volume
    volumes:
      - pg_data:/var/lib/postgresql/data

  # Имя и описание контейнера с бэкендом
  backend:
    # Если образа нет, то его сначала нужно создать по инструкции из Dockerfile, чтобы далее на основании этого образа создать контейнер
    # Укажем расположение Dockerfile из которого необходимо собирать образ для этого контейнера
    build: ./backend/
    # Файл (или список файлов) с переменными окружения
    env_file: .env
    # Какие контейнеры нужно запустить до старта этого контейнера:
    # Контейнер backend должен быть запущен после контейнера db: при старте Django-приложения (в текущем контейнере) база данных в контейнере db должна быть уже доступна.
    depends_on:
      - db
    # Укажем какой volume подключить для этого контейнера в формате имя_volume:директория_контейнера
    # имя_volume - см. чуть выше
    # директория_контейнера - директория внутри текущего контейнера, где хранится статика
    # от которой необходимо перенаправлять все обращения наружу, т.е. к volume
    volumes:
      - static:/backend_static


  # Имя третьего контейнера. Это контейнер с фронтендом
  frontend:
    # Файл (или список файлов) с переменными окружения
    env_file: .env
    # Если образа нет, то его сначала нужно создать по инструкции из Dockerfile, чтобы далее на основании этого образа создать контейнер
    # Укажем расположение Dockerfile из которого необходимо собирать образ для этого контейнера
    build: ./frontend/
    # Выполним команду копирования файлов статики из папки, указанной в Dockerfile в приложении фронтенда (/app/build/) в папку /frontend_static/
    command: cp -r /app/build/. /frontend_static/
    # Укажем какой volume подключить для этого контейнера в формате имя_volume:директория_контейнера
    # имя_volume - см. чуть выше
    # директория_контейнера - директория внутри текущего контейнера, где хранится статика (т.к. скопирована туда, см в command выше)
    # от которой необходимо перенаправлять все обращения наружу, т.е. к volume
    volumes:
      - static:/frontend_static
  
  # Добавляем новый контейнер: gateway.
  gateway:
    # Если образа нет, то его сначала нужно создать по инструкции из Dockerfile, чтобы далее на основании этого образа создать контейнер
    # Укажем расположение Dockerfile из которого необходимо собирать образ для этого контейнера
    build: ./gateway/
    # Аналогично тому, что выше: тут подключаем volume со статикой к gateway
    volumes:
      - static:/staticfiles/
    # Ключ ports устанавливает перенаправление всех запросов с порта 8000 хоста на порт 80 контейнера (порт 80 указан в настройках nginx.conf)
    ports:
      - 8000:80 