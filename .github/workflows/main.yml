# Имя workflow, оно будет использоваться в интерфейсе GitHub Actions
name: Main Taski Workflow

# Перечень событий-триггеров, при которых должен запускаться workflow. Триггеров может быть несколько
on:
  # Событие push (это и есть git push) возникает, когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке (branches) main
    branches:
      - main

# Список действий, которые должны выполниться после срабатывания триггера
jobs:
  # Единственная задача — склонировать код и вывести в консоль дерево файлов
  checkout-and-print-tree:
    # Определяет, в каком окружении будут запущены все команды этой задачи. Окружение создаёт на своём сервере GitHub Actions.
    runs-on: ubuntu-latest
    # Каждая отдельная задача делится на шаги — steps. Каждый шаг — это отдельная команда.
    # Перечень шагов форматируется в виде списка словарей ":" (словарь)
    # В начале каждого шага ставится символ "-" (список)
    steps:
      # На GitHub Actions есть готовые описания шагов, их можно использовать в своих workflow.
      # Применим готовое описание шага для получения исходного кода
      # Каждому шагу можно дать имя — для этого применяется ключ name. Имя шага задаём сами (Check out repository code)
      - name: Check out repository code 
        # Для подключения стороннего workflow вместо ключа run применяется ключ uses
        # Берём готовое решение из библиотеки GitHub Actions
        uses: actions/checkout@v3
      # Выполняем команду tree в текущей директории
      - name: Print project tree
        # В ключе run хранится команда, которая будет выполнена в терминале окружения на раннере (на сервере для выполнения задач, который предоставлен сервисом GitHub Actions)
        run: tree .