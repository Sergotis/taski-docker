# Имя workflow, оно будет использоваться в интерфейсе GitHub Actions
name: Main Taski Workflow

# Перечень событий-триггеров, при которых должен запускаться workflow. Триггеров может быть несколько
on:
  # Событие push (это и есть git push) возникает, когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке (branches) main
    branches:
      - main

# Список действий, которые должны выполниться после срабатывания триггера
jobs:
  # Задача, которую будем выпонлнять (имя задачи даем сами)
  tests:
    # Определяет, в каком окружении будут запущены все команды этой задачи. Окружение создаёт на своём сервере GitHub Actions.
    runs-on: ubuntu-latest

    # Каждая отдельная задача делится на шаги — steps. Каждый шаг — это отдельная команда.
    # Перечень шагов форматируется в виде списка словарей ":" (словарь)
    # В начале каждого шага ставится символ "-" (список)
    steps:
      # На GitHub Actions есть готовые описания шагов, их можно использовать в своих workflow.
      # Применим готовое описание шага для получения исходного кода
      # Каждому шагу можно дать имя — для этого применяется ключ name. Имя шага задаём сами (например, Check out code)

      # Копируем код проекта в рабочую директорию раннера
      - name: Check out code 
        # Для подключения стороннего workflow вместо ключа run применяется ключ uses
        # Берём готовое решение из библиотеки GitHub Actions
        uses: actions/checkout@v3
        
      # Устанавливаем Python - берём готовое решение из библиотеки GitHub Actions
      - name: Set up Python
        uses: actions/setup-python@v4
        # В action setup-python@v4 передаём параметр — версию Python
        with:
          python-version: 3.9

      # Обновляем pip, устанавливаем flake8 и flake8-isort, устанавливаем зависимости проекта
      - name: Install dependencies
        # В ключе run хранится команда, которая будет выполнена в терминале окружения на раннере (на сервере для выполнения задач, который предоставлен сервисом GitHub Actions)
        # Если надо выполнить сразу несколько команд, после run ставится символ | (вертикальная черта, pipe) и ниже построчно пишутся команды:
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
      
      # Запускаем flake8
      - name: Test with flake8
        # В ключе run хранится команда, которая будет выполнена в терминале окружения на раннере (на сервере для выполнения задач, который предоставлен сервисом GitHub Actions)
        # Вызываем flake8 и указываем ему, что нужно проверить файлы только в папке backend/
        run: python -m flake8 backend/
